# 1 "RealPort.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "RealPort.c"

# 1 "RealPort.h" 1






# 1 "vdmlib/Vdm.h" 1
# 43 "vdmlib/Vdm.h"
# 1 "c:/winavr-20100110/lib/gcc/../../avr/include/string.h" 1 3
# 45 "c:/winavr-20100110/lib/gcc/../../avr/include/string.h" 3
# 1 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stddef.h" 1 3 4
# 214 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stddef.h" 3 4
typedef unsigned int size_t;
# 46 "c:/winavr-20100110/lib/gcc/../../avr/include/string.h" 2 3
# 111 "c:/winavr-20100110/lib/gcc/../../avr/include/string.h" 3
extern int ffs (int __val) __attribute__((__const__));
extern int ffsl (long __val) __attribute__((__const__));
extern int ffsll (long long __val) __attribute__((__const__));
extern void *memccpy(void *, const void *, int, size_t);
extern void *memchr(const void *, int, size_t) __attribute__((__pure__));
extern int memcmp(const void *, const void *, size_t) __attribute__((__pure__));
extern void *memcpy(void *, const void *, size_t);
extern void *memmem(const void *, size_t, const void *, size_t) __attribute__((__pure__));
extern void *memmove(void *, const void *, size_t);
extern void *memrchr(const void *, int, size_t) __attribute__((__pure__));
extern void *memset(void *, int, size_t);
extern char *strcat(char *, const char *);
extern char *strchr(const char *, int) __attribute__((__pure__));
extern char *strchrnul(const char *, int) __attribute__((__pure__));
extern int strcmp(const char *, const char *) __attribute__((__pure__));
extern char *strcpy(char *, const char *);
extern int strcasecmp(const char *, const char *) __attribute__((__pure__));
extern char *strcasestr(const char *, const char *) __attribute__((__pure__));
extern size_t strcspn(const char *__s, const char *__reject) __attribute__((__pure__));
extern char *strdup(const char *s1);
extern size_t strlcat(char *, const char *, size_t);
extern size_t strlcpy(char *, const char *, size_t);
extern size_t strlen(const char *) __attribute__((__pure__));
extern char *strlwr(char *);
extern char *strncat(char *, const char *, size_t);
extern int strncmp(const char *, const char *, size_t) __attribute__((__pure__));
extern char *strncpy(char *, const char *, size_t);
extern int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));
extern size_t strnlen(const char *, size_t) __attribute__((__pure__));
extern char *strpbrk(const char *__s, const char *__accept) __attribute__((__pure__));
extern char *strrchr(const char *, int) __attribute__((__pure__));
extern char *strrev(char *);
extern char *strsep(char **, const char *);
extern size_t strspn(const char *__s, const char *__accept) __attribute__((__pure__));
extern char *strstr(const char *, const char *) __attribute__((__pure__));
extern char *strtok(char *, const char *);
extern char *strtok_r(char *, const char *, char **);
extern char *strupr(char *);
# 44 "vdmlib/Vdm.h" 2
# 1 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include-fixed/limits.h" 1 3 4
# 45 "vdmlib/Vdm.h" 2
# 1 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 1 3
# 44 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
# 1 "c:/winavr-20100110/lib/gcc/../../avr/include/inttypes.h" 1 3
# 37 "c:/winavr-20100110/lib/gcc/../../avr/include/inttypes.h" 3
# 1 "c:/winavr-20100110/lib/gcc/../../avr/include/stdint.h" 1 3
# 121 "c:/winavr-20100110/lib/gcc/../../avr/include/stdint.h" 3
typedef int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 142 "c:/winavr-20100110/lib/gcc/../../avr/include/stdint.h" 3
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 159 "c:/winavr-20100110/lib/gcc/../../avr/include/stdint.h" 3
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 213 "c:/winavr-20100110/lib/gcc/../../avr/include/stdint.h" 3
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 273 "c:/winavr-20100110/lib/gcc/../../avr/include/stdint.h" 3
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 38 "c:/winavr-20100110/lib/gcc/../../avr/include/inttypes.h" 2 3
# 77 "c:/winavr-20100110/lib/gcc/../../avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 45 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 2 3
# 1 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stdarg.h" 1 3 4
# 43 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 105 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 46 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 2 3



# 1 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stddef.h" 1 3 4
# 50 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 2 3
# 242 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
struct __file {
 char *buf;
 unsigned char unget;
 uint8_t flags;
# 261 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
 int size;
 int len;
 int (*put)(char, struct __file *);
 int (*get)(struct __file *);
 void *udata;
};
# 405 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern struct __file *__iob[];
# 417 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern struct __file *fdevopen(int (*__put)(char, struct __file*), int (*__get)(struct __file*));
# 434 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern int fclose(struct __file *__stream);
# 608 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern int vfprintf(struct __file *__stream, const char *__fmt, va_list __ap);





extern int vfprintf_P(struct __file *__stream, const char *__fmt, va_list __ap);






extern int fputc(int __c, struct __file *__stream);




extern int putc(int __c, struct __file *__stream);


extern int putchar(int __c);
# 649 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern int printf(const char *__fmt, ...);





extern int printf_P(const char *__fmt, ...);







extern int vprintf(const char *__fmt, va_list __ap);





extern int sprintf(char *__s, const char *__fmt, ...);





extern int sprintf_P(char *__s, const char *__fmt, ...);
# 685 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern int snprintf(char *__s, size_t __n, const char *__fmt, ...);





extern int snprintf_P(char *__s, size_t __n, const char *__fmt, ...);





extern int vsprintf(char *__s, const char *__fmt, va_list ap);





extern int vsprintf_P(char *__s, const char *__fmt, va_list ap);
# 713 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern int vsnprintf(char *__s, size_t __n, const char *__fmt, va_list ap);





extern int vsnprintf_P(char *__s, size_t __n, const char *__fmt, va_list ap);




extern int fprintf(struct __file *__stream, const char *__fmt, ...);





extern int fprintf_P(struct __file *__stream, const char *__fmt, ...);






extern int fputs(const char *__str, struct __file *__stream);




extern int fputs_P(const char *__str, struct __file *__stream);





extern int puts(const char *__str);




extern int puts_P(const char *__str);
# 762 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern size_t fwrite(const void *__ptr, size_t __size, size_t __nmemb,
         struct __file *__stream);







extern int fgetc(struct __file *__stream);




extern int getc(struct __file *__stream);


extern int getchar(void);
# 810 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern int ungetc(int __c, struct __file *__stream);
# 822 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern char *fgets(char *__str, int __size, struct __file *__stream);






extern char *gets(char *__str);
# 840 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern size_t fread(void *__ptr, size_t __size, size_t __nmemb,
        struct __file *__stream);




extern void clearerr(struct __file *__stream);
# 857 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern int feof(struct __file *__stream);
# 868 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
extern int ferror(struct __file *__stream);






extern int vfscanf(struct __file *__stream, const char *__fmt, va_list __ap);




extern int vfscanf_P(struct __file *__stream, const char *__fmt, va_list __ap);







extern int fscanf(struct __file *__stream, const char *__fmt, ...);




extern int fscanf_P(struct __file *__stream, const char *__fmt, ...);






extern int scanf(const char *__fmt, ...);




extern int scanf_P(const char *__fmt, ...);







extern int vscanf(const char *__fmt, va_list __ap);







extern int sscanf(const char *__buf, const char *__fmt, ...);




extern int sscanf_P(const char *__buf, const char *__fmt, ...);
# 938 "c:/winavr-20100110/lib/gcc/../../avr/include/stdio.h" 3
static __inline__ int fflush(struct __file *stream __attribute__((unused)))
{
 return 0;
}
# 46 "vdmlib/Vdm.h" 2
# 1 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 1 3
# 47 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
# 1 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stddef.h" 1 3 4
# 326 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stddef.h" 3 4
typedef int wchar_t;
# 48 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 2 3
# 68 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
typedef struct {
 int quot;
 int rem;
} div_t;


typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef int (*__compar_fn_t)(const void *, const void *);
# 106 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern void abort(void) __attribute__((__noreturn__));




extern int abs(int __i) __attribute__((__const__));
# 120 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern long labs(long __i) __attribute__((__const__));
# 143 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
       size_t __size, int (*__compar)(const void *, const void *));







extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __attribute__((__const__));





extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __attribute__((__const__));
# 175 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern void qsort(void *__base, size_t __nmemb, size_t __size,
    __compar_fn_t __compar);
# 208 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern long strtol(const char *__nptr, char **__endptr, int __base);
# 242 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
# 254 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern long atol(const char *__s) __attribute__((__pure__));
# 266 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern int atoi(const char *__s) __attribute__((__pure__));
# 278 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern void exit(int __status) __attribute__((__noreturn__));
# 290 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern void *malloc(size_t __size) __attribute__((__malloc__));






extern void free(void *__ptr);




extern size_t __malloc_margin;




extern char *__malloc_heap_start;




extern char *__malloc_heap_end;






extern void *calloc(size_t __nele, size_t __size) __attribute__((__malloc__));
# 338 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern void *realloc(void *__ptr, size_t __size) __attribute__((__malloc__));

extern double strtod(const char *__nptr, char **__endptr);

extern double atof(const char *__nptr);
# 364 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern int rand(void);



extern void srand(unsigned int __seed);






extern int rand_r(unsigned long *__ctx);
# 406 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern char *itoa(int __val, char *__s, int __radix);
# 434 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern char *ltoa(long int __val, char *__s, int __radix);
# 460 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern char *utoa(unsigned int __val, char *__s, int __radix);
# 486 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern char *ultoa(unsigned long int __val, char *__s, int __radix);
# 504 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern long random(void);




extern void srandom(unsigned long __seed);







extern long random_r(unsigned long *__ctx);
# 563 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern char *dtostre(double __val, char *__s, unsigned char __prec,
       unsigned char __flags);
# 580 "c:/winavr-20100110/lib/gcc/../../avr/include/stdlib.h" 3
extern char *dtostrf(double __val, signed char __width,
                     unsigned char __prec, char *__s);
# 47 "vdmlib/Vdm.h" 2
# 1 "c:/winavr-20100110/lib/gcc/../../avr/include/assert.h" 1 3
# 102 "c:/winavr-20100110/lib/gcc/../../avr/include/assert.h" 3
extern void __assert(const char *__func, const char *__file,
       int __lineno, const char *__sexp);
# 48 "vdmlib/Vdm.h" 2

# 1 "./VdmModelFeatures.h" 1
# 50 "vdmlib/Vdm.h" 2
# 1 "vdmlib/TypedValue.h" 1
# 34 "vdmlib/TypedValue.h"
# 1 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stdbool.h" 1 3 4
# 35 "vdmlib/TypedValue.h" 2

# 1 "vdmlib/VdmDefines.h" 1
# 37 "vdmlib/TypedValue.h" 2
# 48 "vdmlib/TypedValue.h"
typedef enum
{
 VDM_INT,
 VDM_NAT,
 VDM_NAT1,
 VDM_BOOL,
 VDM_REAL,
 VDM_RAT,
 VDM_CHAR,

 VDM_SET,


 VDM_SEQ,







 VDM_QUOTE,




 VDM_CLASS
} vdmtype;


typedef union TypedValueType
{

 void* ptr;


 int intVal;


 _Bool boolVal;


 double doubleVal;


 char charVal;


 unsigned int quoteVal;
} TypedValueType;


struct TypedValue
{
 vdmtype type;
 struct TypedValue **ref_from;
 TypedValueType value;
};



struct Collection
{
 struct TypedValue** value;
 int size;
};

int vdmCollectionSize(struct TypedValue* collection);
struct TypedValue* vdmCollectionIndex(struct TypedValue* collection,int index);
# 148 "vdmlib/TypedValue.h"
struct OptionalType
{
 _Bool hasValue;
 struct TypedValue value;
};

struct TypedValue* newTypeValue(vdmtype type, TypedValueType value);



struct TypedValue* newInt(int x);
struct TypedValue* newBool(_Bool x);
struct TypedValue* newReal(double x);
struct TypedValue* newChar(char x);
struct TypedValue* newQuote(unsigned int x);







struct TypedValue* newCollectionWithValues(size_t size, vdmtype type, struct TypedValue** elements);
struct TypedValue* newCollection(size_t size, vdmtype type);

struct TypedValue* vdmClone(struct TypedValue* x);

_Bool equals(struct TypedValue* a, struct TypedValue* b);
struct TypedValue* vdmEquals(struct TypedValue* a, struct TypedValue* b);
struct TypedValue* vdmInEquals(struct TypedValue* a, struct TypedValue* b);
_Bool collectionEqual(struct TypedValue* col1,struct TypedValue* col2);

void vdmFree(struct TypedValue* ptr);

extern struct TypedValue* newSetVar(size_t size,...);





extern struct TypedValue* vdmSetEquals(struct TypedValue* set1, struct TypedValue* set2);
extern void remove_allocd_mem_node_by_location(struct TypedValue* loc);
# 51 "vdmlib/Vdm.h" 2
# 1 "vdmlib/VdmBasicTypes.h" 1
# 33 "vdmlib/VdmBasicTypes.h"
# 1 "vdmlib/Vdm.h" 1
# 34 "vdmlib/VdmBasicTypes.h" 2
# 1 "vdmlib/VdmGC.h" 1







struct alloc_list_node
{
 struct TypedValue* loc;
 struct alloc_list_node *next;
};


void vdm_gc_init();
void vdm_gc();
void vdm_gc_shutdown();
void add_allocd_mem_node(struct TypedValue* l, struct TypedValue* *from);
void remove_allocd_mem_node(struct alloc_list_node *node);
void remove_allocd_mem_node_by_location(struct TypedValue* loc);

extern struct alloc_list_node *allocd_mem_head;
extern struct alloc_list_node *allocd_mem_current;





struct TypedValue* newTypeValueGC(vdmtype type, TypedValueType value, struct TypedValue* *ref_from);
struct TypedValue* vdmCloneGC(struct TypedValue* x, struct TypedValue* *from);
struct TypedValue* newIntGC(int x, struct TypedValue* *from);
struct TypedValue* newBoolGC(_Bool x, struct TypedValue* *from);
struct TypedValue* newRealGC(double x, struct TypedValue* *from);
struct TypedValue* newCharGC(char x, struct TypedValue* *from);
struct TypedValue* newQuoteGC(unsigned int x, struct TypedValue* *from);
struct TypedValue* vdmEqualsGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
# 35 "vdmlib/VdmBasicTypes.h" 2







struct TypedValue* vdmNot(struct TypedValue* arg);
struct TypedValue* vdmNotGC(struct TypedValue* arg, struct TypedValue* *from);
struct TypedValue* vdmAnd(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmAndGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmOr(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmOrGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmXor(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmXorGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmImplies(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmImpliesGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmBiimplication(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmBiimplicationGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);




struct TypedValue* vdmMinus(struct TypedValue* arg);
struct TypedValue* vdmMinusGC(struct TypedValue* arg, struct TypedValue* *from);
struct TypedValue* vdmAbs(struct TypedValue* arg);
struct TypedValue* vdmAbsGC(struct TypedValue* arg, struct TypedValue* *from);
struct TypedValue* vdmFloor(struct TypedValue* arg);
struct TypedValue* vdmFloorGC(struct TypedValue* arg, struct TypedValue* *from);
struct TypedValue* vdmSum(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmSumGC(struct TypedValue* a,struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmDifference(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmDifferenceGC(struct TypedValue* a,struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmProduct(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmProductGC(struct TypedValue* a,struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmDivision(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmDivisionGC(struct TypedValue* a,struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmDiv(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmDivGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmRem(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmRemGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmMod(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmModGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmPower(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmPowerGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmNumericEqual(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmNumericEqualGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmGreaterThan(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmGreaterThanGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmGreaterOrEqual(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmGreaterOrEqualGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmLessThan(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmLessThanGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);
struct TypedValue* vdmLessOrEqual(struct TypedValue* a,struct TypedValue* b);
struct TypedValue* vdmLessOrEqualGC(struct TypedValue* a, struct TypedValue* b, struct TypedValue* *from);




_Bool isNumber(struct TypedValue* val);
struct TypedValue* isInt(struct TypedValue*);
struct TypedValue* isReal(struct TypedValue*);
struct TypedValue* isBool(struct TypedValue*);
int toInteger(struct TypedValue* a);
double toDouble(struct TypedValue* a);
_Bool toBool(struct TypedValue* a);
# 52 "vdmlib/Vdm.h" 2
# 1 "vdmlib/VdmSet.h" 1
# 46 "vdmlib/VdmSet.h"
struct TypedValue* newSetWithValues(size_t size,struct TypedValue** elements);



struct TypedValue* newSetVar(size_t size,...);
struct TypedValue* newSetVarToGrow(size_t size, size_t expected_size, ...);

void vdmSetGrow(struct TypedValue* set, struct TypedValue* element);
void vdmSetFit(struct TypedValue* set);
struct TypedValue* vdmSetEnumerateSetOfInts(int lower, int upper);
struct TypedValue* vdmSetElementAt(struct TypedValue* set, int loc);
struct TypedValue* vdmSetMemberOf(struct TypedValue* set, struct TypedValue* element);
struct TypedValue* vdmSetNotMemberOf(struct TypedValue* set, struct TypedValue* element);
struct TypedValue* vdmSetUnion(struct TypedValue* set1, struct TypedValue* set2);
struct TypedValue* vdmSetInter(struct TypedValue* set1, struct TypedValue* set2);
struct TypedValue* vdmSetDifference(struct TypedValue* set1, struct TypedValue* set2);
struct TypedValue* vdmSetSubset(struct TypedValue* set1, struct TypedValue* set2);
struct TypedValue* vdmSetProperSubset(struct TypedValue* set1, struct TypedValue* set2);
struct TypedValue* vdmSetEquals(struct TypedValue* set1, struct TypedValue* set2);
struct TypedValue* vdmSetNotEquals(struct TypedValue* set1, struct TypedValue* set2);
struct TypedValue* vdmSetCard(struct TypedValue* set);
struct TypedValue* vdmSetDunion(struct TypedValue* set);
struct TypedValue* vdmSetDinter(struct TypedValue* set);
struct TypedValue* vdmSetPower(struct TypedValue* set);
# 53 "vdmlib/Vdm.h" 2
# 1 "vdmlib/VdmSeq.h" 1
# 43 "vdmlib/VdmSeq.h"
struct TypedValue* newSeq(size_t size);



struct TypedValue* newSeqWithValues(size_t size,struct TypedValue** elements);



struct TypedValue* newSeqVar(size_t size,...);
struct TypedValue* newSeqVarToGrow(size_t size, size_t expected_size, ...);

void vdmSeqGrow(struct TypedValue* seq, struct TypedValue* element);
void vdmSeqFit(struct TypedValue* seq);
struct TypedValue* vdmSeqHd(struct TypedValue* seq);
struct TypedValue* vdmSeqTl(struct TypedValue* seq);
struct TypedValue* vdmSeqLen(struct TypedValue* seq);


struct TypedValue* vdmSeqElems(struct TypedValue* seq);
struct TypedValue* vdmSeqInds(struct TypedValue* seq);


struct TypedValue* vdmSeqConc(struct TypedValue* seq,struct TypedValue* seq2);
struct TypedValue* vdmSeqReverse(struct TypedValue* seq);

struct TypedValue* vdmSeqIndex(struct TypedValue* seq,struct TypedValue* index);
struct TypedValue* vdmSeqEqual(struct TypedValue* seq,struct TypedValue* seq2);
struct TypedValue* vdmSeqInEqual(struct TypedValue* seq,struct TypedValue* seq2);

void vdmSeqUpdate(struct TypedValue* seq, struct TypedValue* index, struct TypedValue* newValue);
# 54 "vdmlib/Vdm.h" 2
# 1 "vdmlib/VdmMap.h" 1
# 43 "vdmlib/VdmMap.h"
# 1 "c:/winavr-20100110/lib/gcc/../../avr/include/assert.h" 1 3
# 102 "c:/winavr-20100110/lib/gcc/../../avr/include/assert.h" 3
extern void __assert(const char *__func, const char *__file,
       int __lineno, const char *__sexp);
# 44 "vdmlib/VdmMap.h" 2
# 55 "vdmlib/Vdm.h" 2
# 1 "vdmlib/VdmClass.h" 1
# 33 "vdmlib/VdmClass.h"
# 1 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stddef.h" 1 3 4
# 152 "c:\\winavr-20100110\\bin\\../lib/gcc/avr/4.3.3/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 34 "vdmlib/VdmClass.h" 2



typedef void (*freeVdmClassFunction)(void*);

typedef struct TypedValue* (*VirtualFunctionPointer)(void * self, ...);
# 49 "vdmlib/VdmClass.h"
struct VTable
{





   int d;
   int i;





   VirtualFunctionPointer pFunc;
};
# 85 "vdmlib/VdmClass.h"
struct ClassType
{
 void* value;
 int classId;
 unsigned int* refs;
 freeVdmClassFunction freeClass;
};

struct ClassType* newClassValue(int id, unsigned int* refs, freeVdmClassFunction freeClass, void* value);
# 56 "vdmlib/Vdm.h" 2
# 1 "vdmlib/VdmProduct.h" 1
# 33 "vdmlib/VdmProduct.h"
# 1 "c:/winavr-20100110/lib/gcc/../../avr/include/assert.h" 1 3
# 102 "c:/winavr-20100110/lib/gcc/../../avr/include/assert.h" 3
extern void __assert(const char *__func, const char *__file,
       int __lineno, const char *__sexp);
# 34 "vdmlib/VdmProduct.h" 2
# 57 "vdmlib/Vdm.h" 2
# 8 "RealPort.h" 2
# 1 "Port.h" 1
# 10 "Port.h"
# 1 "Port.h" 1
# 11 "Port.h" 2
# 27 "Port.h"
extern struct TypedValue* numFields_1;
# 47 "Port.h"
struct Port
{


 struct VTable * _Port_pVTable;int _Port_id;unsigned int _Port_refs;

 struct TypedValue* m_Port_numFields;

};
# 66 "Port.h"
 struct TypedValue* _Z4PortEV(struct Port* this_);
# 75 "Port.h"
 void Port_const_init();
 void Port_const_shutdown();
 void Port_static_init();
 void Port_static_shutdown();
# 88 "Port.h"
void Port_free_fields(struct Port*);
struct Port* Port_Constructor(struct Port*);
# 9 "RealPort.h" 2



# 1 "RealPort.h" 1
# 13 "RealPort.h" 2
# 49 "RealPort.h"
struct RealPort
{


 struct VTable * _Port_pVTable;int _Port_id;unsigned int _Port_refs;

 struct TypedValue* m_Port_numFields;



 struct VTable * _RealPort_pVTable;int _RealPort_id;unsigned int _RealPort_refs;

 struct TypedValue* m_RealPort_value;
 struct TypedValue* m_RealPort_numFields;

};
# 75 "RealPort.h"
 struct TypedValue* _Z8RealPortER(struct RealPort* this_, struct TypedValue* v);

 struct TypedValue* _Z8RealPortEV(struct RealPort* this_);
# 86 "RealPort.h"
 void RealPort_const_init();
 void RealPort_const_shutdown();
 void RealPort_static_init();
 void RealPort_static_shutdown();
# 99 "RealPort.h"
void RealPort_free_fields(struct RealPort*);
struct RealPort* RealPort_Constructor(struct RealPort*);
# 3 "RealPort.c" 2
# 13 "RealPort.c"
void RealPort_free_fields(struct RealPort *this)
{
  vdmFree(this->m_RealPort_value);
 }

static void RealPort_free(struct RealPort *this)
{
 --this->_RealPort_refs;
 if (this->_RealPort_refs < 1)
 {
  RealPort_free_fields(this);
  free(this);
 }
}
# 36 "RealPort.c"
 static struct TypedValue* _Z17fieldInitializer4EV() {

struct TypedValue* ret_6 = newReal(0.0);

return ret_6;
}



 static void _Z8setValueER(struct RealPort* this, struct TypedValue* v) {

struct TypedValue* field_tmp_3 = vdmCloneGC(v, &field_tmp_3);

vdmFree(*((struct TypedValue**)(((unsigned char*)((struct RealPort *)(((unsigned char*)this) + (!strcmp("RealPort", "RealPort")?0: __builtin_offsetof (struct RealPort, _RealPort_pVTable))))) + __builtin_offsetof (struct RealPort, m_RealPort_value)))); (*((struct TypedValue**)(((unsigned char*)((struct RealPort *)(((unsigned char*)this) + (!strcmp("RealPort", "RealPort")?0: __builtin_offsetof (struct RealPort, _RealPort_pVTable))))) + __builtin_offsetof (struct RealPort, m_RealPort_value))) = vdmCloneGC(field_tmp_3, (struct TypedValue* *)((struct TypedValue**)(((unsigned char*)((struct RealPort *)(((unsigned char*)this) + (!strcmp("RealPort", "RealPort")?0: __builtin_offsetof (struct RealPort, _RealPort_pVTable))))) + __builtin_offsetof (struct RealPort, m_RealPort_value)))));

vdmFree(field_tmp_3);
}



 static struct TypedValue* _Z8getValueEV(struct RealPort* this) {

struct TypedValue* ret_7 = vdmCloneGC(vdmCloneGC((*((struct TypedValue**)((((unsigned char*)((struct RealPort *)(((unsigned char*)this) + (!strcmp("RealPort", "RealPort")?0: __builtin_offsetof (struct RealPort, _RealPort_pVTable))))) + __builtin_offsetof (struct RealPort, m_RealPort_value))))), ((void *)0)), &ret_7)
;

return ret_7;
}



 void RealPort_const_init() {

return ;
}



 void RealPort_const_shutdown() {

return ;
}



 void RealPort_static_init() {

return ;
}



 void RealPort_static_shutdown() {

return ;
}



 static struct TypedValue* Port__Z8getValueEV(struct Port* base) {

struct RealPort* this = ( (struct RealPort *) (((unsigned char*)base) - __builtin_offsetof (struct RealPort, _Port_pVTable) ) )
;

return _Z8getValueEV(this);
}
# 112 "RealPort.c"
 static struct VTable VTableArrayForRealPort [] ={

{0,0,((VirtualFunctionPointer) _Z8RealPortER),},
{0,0,((VirtualFunctionPointer) _Z8setValueER),},
{0,0,((VirtualFunctionPointer) _Z8getValueEV),},
{0,0,((VirtualFunctionPointer) _Z8RealPortEV),},

} ;


 static struct VTable g_VTableArrayForRealPort_Override_Port [3] ;
# 132 "RealPort.c"
struct RealPort* RealPort_Constructor(struct RealPort* this_ptr)
{

 if(this_ptr==((void *)0))
 {
  this_ptr = (struct RealPort*) malloc(sizeof(struct RealPort));
 }

 if(this_ptr!=((void *)0))
 {



  Port_Constructor((struct Port*)((struct Port *)(((unsigned char*)this_ptr) + (!strcmp("RealPort", "Port")?0: __builtin_offsetof (struct RealPort, _Port_pVTable)))));

     if(! g_VTableArrayForRealPort_Override_Port[0].pFunc)
   {


    memcpy( g_VTableArrayForRealPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);


         g_VTableArrayForRealPort_Override_Port[1].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV;

       }
   this_ptr->_Port_pVTable = g_VTableArrayForRealPort_Override_Port;



  this_ptr->_RealPort_id = 3;
  this_ptr->_RealPort_refs = 0;
  this_ptr->_RealPort_pVTable=VTableArrayForRealPort;

    this_ptr->m_RealPort_value= _Z17fieldInitializer4EV();
   }

 return this_ptr;
}


static struct TypedValue* new()
{
 struct RealPort* ptr=RealPort_Constructor(((void *)0));

 return newTypeValue(VDM_CLASS, (TypedValueType)
   { .ptr=newClassValue(ptr->_RealPort_id, &ptr->_RealPort_refs, (freeVdmClassFunction)&RealPort_free, ptr)});
}
# 190 "RealPort.c"
 struct TypedValue* _Z8RealPortER(struct RealPort* this, struct TypedValue* v) {

struct TypedValue* __buf = ((void *)0)
;

if ( this == ((void *)0) )

 {

__buf = new();

this = ((struct RealPort *) ( ((struct ClassType*)__buf->value.ptr)->value));
}
;

((struct TypedValue* (*)( void*, struct TypedValue*))(*((struct VTable**)((((unsigned char*)this) + __builtin_offsetof (struct RealPort, _RealPort_pVTable)))))[1].pFunc)(((struct RealPort *)(((unsigned char*)this) + (!strcmp("RealPort", "RealPort")?0: __builtin_offsetof (struct RealPort, _RealPort_pVTable)))), v);

return __buf;
}



 struct TypedValue* _Z8RealPortEV(struct RealPort* this) {

struct TypedValue* __buf = ((void *)0)
;

if ( this == ((void *)0) )

 {

__buf = new();

this = ((struct RealPort *) ( ((struct ClassType*)__buf->value.ptr)->value));
}
;

return __buf;
}
